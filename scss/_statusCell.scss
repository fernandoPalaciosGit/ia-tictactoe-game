/* WINNER STATUS CELLS
 * ia-matrix-game--match-[column|row]-[0|1|2]
 */
@for $col from 0 through 2 {
    @for $row from 0 through 2 {
        @each $typeLine, $property in $game-match-line-properties {
            $cell: if($typeLine == 'column', #{$col}#{$row}, #{$row}#{$col});

            &--match-#{$typeLine}-#{$col} [data-cell-grid='#{$cell}']:after {
                @include game-match-cell-status(
                    map-get($property, width),
                    map-get($property, height),
                    map-get($property, top),
                    map-get($property, left)
                );
                border-#{map-get($property, borderType)}-width: 9px;

                @media screen and (min-width: $media-medium-width) {
                    border-#{map-get($property, borderType)}-width: 12px;
                }
            }
        }
    }
}

/* WINNER STATUS CELLS
 * ia-matrix-game--match-diagonal-[1|2]
 */
$listDiagonal: (1, -1);
$diagonalProp : map-get($game-match-line-properties, column); //select column as reference diagonal properties
@each $diagonal in  $listDiagonal{
    $cellA : 0#{abs($diagonal - 1)};
    $cellCenter : 11;
    $cellB : 2#{abs($diagonal + 1)};
    $indexDiagonal: index($listDiagonal, $diagonal);

    &--match-diagonal-#{$indexDiagonal} {
        [data-cell-grid='#{$cellA}']:after,
        [data-cell-grid='#{$cellCenter}']:after,
        [data-cell-grid='#{$cellB}']:after {
            @include game-match-cell-status(
            $h: map-get($diagonalProp, height) * 2,
            $t: -90px,
            $l: map-get($diagonalProp, left)
            );
            transform-origin: center;
            transform: rotate(#{$diagonal * 45}deg);
            border-#{map-get($diagonalProp, borderType)}-width: 9px;
            width: if($indexDiagonal == 1, 20%, 70%);

            @media screen and (min-width: $media-medium-width) {
                border-#{map-get($diagonalProp, borderType)}-width: 12px;
                width: map-get($diagonalProp, width);
            }
        }
    }
}
